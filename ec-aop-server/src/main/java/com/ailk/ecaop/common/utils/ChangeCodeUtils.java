package com.ailk.ecaop.common.utils;

import java.util.Date;
import java.util.Map;

import org.eclipse.jetty.util.ajax.JSON;
import org.n3r.config.Config;
import org.n3r.ecaop.core.DefaultExchange;
import org.n3r.ecaop.core.Exchange;
import org.n3r.ecaop.core.Message;
import org.n3r.ecaop.core.conf.EcAopConfigLoader;
import org.n3r.ecaop.core.impl.DefaultMessage;

import net.sf.json.JSONObject;

public class ChangeCodeUtils {

    public static Object changeUserState(String userState) {
        // Map changeMap = MapUtils.asMap("0", "10", "1", "11", "2", "12", "B", "13", "5", "14", "A", "15", "H", "21");
        // Object userState3G = changeMap.get(userState);
        return "01".equals(userState) ? "00" : "30";
    }

    public static Object changePayType(Object payType) {
        Map changeMap = MapUtils.asMap("10", "00", "11", "01", "12", "2", "13", "5", "14", "6", "15", "3", "16", "C",
                "17", "4", "40", "D", "41", "E", "42", "F", "43", "H", "44", "I", "W", "W", "48", "0B", "49", "v",
                "50", "u", "51", "L");
        Object retStr = changeMap.get(payType);
        return null == retStr ? "00" : retStr;
    }

    /**
     * 转换预付费类型
     * aop 1-后付费 3-准预付费 2-预付费
     * cbss 0-后付费 1-准预付费 2-预付费
     * */
    public static Object changeSerType(Object payType) {
        Map changeMap = MapUtils.asMap("1", "0", "2", "2", "3", "1");
        Object retStr = changeMap.get(payType);
        return null == retStr ? "0" : retStr;
    }

    /**
     * odsb为北六宽带正式提交接口
     * 受理该业务传41 44支付方式,需要透传
     * 
     * @param payType
     * @return
     */
    public static Object changePayType4N6odsb(Object payType) {
        Map changeMap = MapUtils.asMap("10", "00", "11", "01", "12", "2", "13", "5", "14", "6", "15", "3", "16", "C",
                "17", "4", "40", "40", "41", "41", "42", "42", "43", "43", "44", "44", "48", "45");
        Object retStr = changeMap.get(payType);
        return null == retStr ? "00" : retStr;
    }

    /**
     * 南25专用
     *
     * @param payType
     * @return
     */
    public static Object changePayForN25(Object payType) {
        Map changeMap = MapUtils.asMap("10", "10", "48", "21");
        Object retStr = changeMap.get(payType);
        return null == retStr ? "10" : retStr;
    }

    /**
     * 北六ESS专用
     * 
     * @param payType
     * @return
     */
    public static Object changePayTypeForN6ESS(Object payType) {
        Map changeMap = MapUtils.asMap("10", "00", "11", "01", "12", "2", "13", "5", "14", "6", "15", "3", "16", "C",
                "17", "4", "40", "0J", "41", "0K", "42", "0U", "43", "0I", "44", "0O");
        Object retStr = changeMap.get(payType);
        return null == retStr ? "00" : retStr;
    }

    /**
     * smoss为分步补换卡提交接口
     * 黑龙江预受理做该业务传41 44支付方式,用上面方法报错为长度必须为2位
     * 
     * @param payType
     * @return
     */
    public static Object changePayType4N6smoss(Object payType) {
        Map changeMap = MapUtils.asMap("10", "00", "11", "01", "12", "2", "13", "5", "14", "6", "15", "3", "16", "C",
                "17", "4", "40", "40", "41", "41", "42", "42", "43", "43", "44", "44");
        Object retStr = changeMap.get(payType);
        return null == retStr ? "00" : retStr;
    }

    public static Object changePayType4CB(Object payType) {
        Map changeMap = MapUtils.asMap("10", "0", "11", "Z", "12", "Z", "13", "5", "14", "5", "15", "5", "25", "C",
                "02", "X", "40", "D", "41", "E", "42", "F", "43", "H", "44", "I", "W", "W", "45", "V", "46", "U", "48",
                "0B", "49", "v", "50", "u");
        Object retStr = changeMap.get(payType);
        return null == retStr ? "0" : retStr;
    }

    public static Object changeN6PayType(String payType) {
        if (null == payType || payType.length() != 2) {
            return "00";
        }
        return "0" + payType.toString().substring(1);
    }

    public static String changeEparchy(Map msg) {
        // try {
        // Esql dao = DaoEngine.getMySqlDao("/com/ailk/ecaop/sql/cbss/CbssAreaChangeQuery.esql");
        // List result = dao.id("selAreaCode").params(msg).execute();
        // if (null == result || 0 == result.size()) {
        // throw new EcAopServerBizException("9999", "地市信息转换失败");
        // }
        // msg.put("areaCode", result.get(0));
        // }
        // catch (Exception e) {
        // e.printStackTrace();
        // throw new EcAopServerBizException("9999", e.getMessage());
        // // msg.put("areaCode", msg.get("city"));
        // }
        // return msg.get("areaCode").toString();
        String areaCode = changeCityCode(msg);
        msg.put("areaCode", areaCode);
        return areaCode;
    }

    public String changeEparchyUnStatic(Map msg) {
        // try {
        // Esql dao = DaoEngine.getMySqlDao("/com/ailk/ecaop/sql/cbss/CbssAreaChangeQuery.esql");
        // List result = dao.id("selAreaCode").params(msg).execute();
        // if (null == result || 0 == result.size()) {
        // throw new EcAopServerBizException("9999", "地市信息转换失败");
        // }
        // msg.put("areaCode", result.get(0));
        // }
        // catch (Exception e) {
        // e.printStackTrace();
        // throw new EcAopServerBizException("9999", e.getMessage());
        // // msg.put("areaCode", msg.get("city"));
        // }
        // return msg.get("areaCode").toString();
        String areaCode = changeCityCode(msg);
        msg.put("areaCode", areaCode);
        return areaCode;
    }

    public Object getInModeCode(String appcode) {
        return isWOPre(appcode) ? "X" : "E";
    }

    /**
     * 校验是否为沃受理系统
     * 
     * @param appcode
     * @return
     */
    public boolean isWOPre(String appcode) {
        return Config.getStr("ecaop.common.trades.appcode.route.inmode").contains(appcode);
    }

    /*
     * 新增cbsp.sub
     */

    public Object getInModeCodeForWo(String appcode) {
        return isWOPreCbsp(appcode) ? "X" : "E";
    }

    /**
     * 和上面的一样，新增cpsb
     * 
     */
    public boolean isWOPreCbsp(String appcode) {
        return EcAopConfigLoader.getStr("ecaop.common.trades.appcode.route.inmodeCode").contains(appcode);
    }

    public Object changeSpeed(Object key) {
        Map speedMap = MapUtils.asMap("0", "64k", "1", "384k", "2", "512k", "3", "1M", "4", "2M", "5", "3M", "6", "4M",
                "7", "5M", "8", "6M", "9", "7M", "10", "8M", "11", "9M", "12", "10M", "13", "11M", "14", "16M", "15",
                "20M", "16", "50M", "17", "55M", "18", "100M", "19", "155M", "20", "300M", "21", "400M", "22", "500M",
                "23", "1000M", "24", "不限速", "25", "其他速率", "26", "126k", "27", "256k", "28", "768k", "29", "1.5M", "30",
                "2.5M", "31", "12M", "32", "13M", "33", "14M", "34", "15M", "35", "17M", "36", "18M", "37", "19M",
                "38", "25M", "39", "30M", "40", "35M", "41", "40M", "42", "45M", "43", "60M", "44", "65M", "45", "70M",
                "46", "75M", "47", "80M", "48", "85M", "49", "90M", "50", "95M", "51", "110M", "52", "120M", "53",
                "130M", "54", "140M", "55", "150M", "56", "160M", "57", "170M", "58", "180M", "59", "190M", "60",
                "200M", "61", "250M", "62", "350M", "63", "450M", "64", "550M", "65", "600M", "66", "622M", "67",
                "650M", "68", "700M", "69", "750M", "70", "800M", "71", "850M", "72", "900M", "73", "950M", "74",
                "1.5G", "75", "2G", "76", "2.5G");
        Object speed = speedMap.get(key);
        return null == speed ? key : speed;
    }

    public Object changeSpeedForSD(Object key) {
        Map speedMap = MapUtils.asMap("1", "4M独享", "2", "15M", "4", "30M", "5", "2M", "6", "512K独享", "7", "64K/768K",
                "8", "8M独享", "9", "4M及以上", "10", "4M",
                "11", "3M独享", "12", "10M(新)", "13", "区间1000M", "14", "1000M", "15", "2M独享", "16", "10M", "17", "3M",
                "18", "2M老",
                "19", "768K", "20", "6M共享", "21", "6M独享", "22", "2.5M", "23", "2M及以上", "24", "2M免", "25", "4M", "26",
                "10M共享",
                "27", "100M以上", "28", "分期付款", "29", "3M及以上", "30", "100M(1)", "31", "6M(含固话)", "32", "区内100M", "34",
                "共享10M(不再使用)",
                "35", "6M", "36", "1.5M", "37", "10M独享", "38", "不限速", "39", "10M(不再使用)", "40", "10M(含固话)", "41", "20M",
                "42", "60M",
                "44", "20M以上", "45", "512K", "46", "区间100M", "47", "50M", "48", "8M(含固话)", "49", "5M", "50", "区内1000",
                "51", "40M",
                "52", "256K", "53", "1M/768K/s2", "54", "1M", "55", "8M", "56", "超级AD8M", "57", "2M(新)", "58", "64K",
                "59", "80M", "71", "200M(1)",
                "72", "500M", "73", "1G", "111", "20M", "112", "30M", "113", "35M", "114", "50M", "115", "100M", "116",
                "20M(上下行对称)",
                "117", "30M(上下行对称)", "118", "50M(上下行对称)", "120", "100M(上下行对称)", "121", "200M(上下行对称)", "123", "300M",
                "125", "30M(上下行对称)", "126", "50M(上下行对称)", "127", "300M(上下行对称)", "131", "100M(2)", "132",
                "50M宽带+50MIPTV专用",
                "133", "100M宽带+100MIPTV专用", "134", "30M宽带+30MIPTV专用", "136", "60M", "137", "200M(2)", "140", "2.5G",
                "141", "10G",
                "151", "光宽带100M", "152", "光宽带200M", "153", "速率下行100M，上行40M", "155", "1000M");
        Object speed = speedMap.get(key);
        return null == speed ? key : speed;
    }

    public static Object changeCardType(Object key) {
        // Map cardTypeMap = MapUtils.asMap("8700800020", "35", "8700800030", "326", "8600700002", "306", "8700800001",
        // "23", "8600100004", "300", "8701000003", "351", "8700800332", "35", "8601200002", "341", "8700800026",
        // "324", "8700100023", "16", "8600600063", "346", "8601300001", "53", "8600100006", "331", "8700700044",
        // "60", "8600500002", "302", "8700800029", "325", "8700600003", "21", "8700800191", "50", "8700800231",
        // "335", "8700200003", "17", "8600100005", "62", "8600100346", "57", "8700800371", "67", "8600100001",
        // "10", "8700800008", "28", "8600600065", "58", "8700100003", "307", "8600100003", "10", "8600600001",
        // "9", "8700800003", "25", "8700800391", "335", "8700800378", "64", "8700500001", "20", "8700700043",
        // "349", "8700400001", "19", "8700200023", "308", "8700300002", "338", "8700800232", "335", "8700100024",
        // "16", "8700400002", "309", "8700800005", "313", "8700800291", "52", "8601200001", "54", "8700800374",
        // "354", "8700600004", "311", "8700800113", "335", "8700800233", "48", "8700800007", "27", "8700800019",
        // "34", "8700800014", "318", "8700800028", "39", "8700500002", "310", "8601400021", "343", "8700800375",
        // "353", "8700800373", "355", "8700100002", "307", "8700300003", "338", "8601300002", "340",
        // "8600500005", "63", "8700300001", "18", "8601100001", "55", "8700800016", "32", "8700800023", "36",
        // "8700800021", "321", "8600600064", "345", "8600600002", "303", "8700800004", "26", "8700800024", "37",
        // "8700200001", "17", "8600700045", "59", "8700800018", "320", "8600500006", "332", "8601400002", "343",
        // "8700800017", "319", "8600100345", "344", "8700800111", "49", "8700800031", "46", "8700200024", "17",
        // "8700800376", "352", "8700800022", "322", "8600700003", "306", "8700800152", "335", "8700800032", "47",
        // "8700800009", "315", "8601100021", "342", "8700800234", "49", "8700800012", "30", "8700800002", "24",
        // "8600500001", "8", "8700800015", "31", "8701000004", "350", "8601100002", "342", "8700800331", "322",
        // "8700700004", "312", "8701000005", "61", "8600700001", "14", "8700800114", "335", "8700800377", "65",
        // "8701000002", "51", "8700800034", "334", "8700800333", "321", "8700800251", "335", "8700800372", "66",
        // "8700700003", "22", "8700800033", "333", "8700800027", "38", "8700800351", "356", "8700800010", "316",
        // "8700800011", "29", "8700800151", "335", "8600600003", "303", "8700800334", "34", "8600700046", "347",
        // "8700800025", "323", "8600700043", "348", "8600700044", "347", "8600100002", "300", "8700800211",
        // "337", "8700200002", "308", "8601400001", "56", "8700100001", "16", "8700800013", "317", "8700800006",
        // "314", "8700800112", "48", "8700800392", "48", "8600600066", "345", "8700400003", "309", "8100100005",
        // "300", "8100100007", "300", "8100100009", "300", "8100100010", "300", "8200500002", "305",
        // "8200700001", "301", "8600700023", "343", "8600700066", "347", "8600200384", "305", "8200500023",
        // "305", "8600700024", "306", "8600600046", "09", "8600600048", "09", "8200500003", "305", "8200700022",
        // "301", "8700800312", "314", "8200700002", "301", "8200600002", "10", "8100100042", "300", "8200100021",
        // "302", "8600500146", "302", "8600200125", "12", "8600200124", "12", "8700800091", "25", "8600200045",
        // "305", "8700800051", "25", "8600100047", "10", "8600500004", "302", "8600300002", "301", "8600200002",
        // "305", "8600200001", "12", "8200300001", "303", "8200900004", "304", "8200100001", "302", "8100100001",
        // "300", "8200300021", "306", "8600100090", "300", "8600100086", "300", "8700700023", "87", "8601500003",
        // "86");
        // 物料编码改为从redis配置中获取,配置在ec-aop.props by wangmc 20180112
        Map redisCardTypeMap = (Map) JSON.parse(EcAopConfigLoader.getStr("ecaop.global.param.change.cardtype"));
        Object cardType = redisCardTypeMap.get(key);
        return cardType;
    }

    // 河北省份成卡类型映射关系，物料编码+卡小类=卡大类
    public static Object hBchangeCardType(Object key) {
        Map cardTypeMap = MapUtils.asMap("86001000060058", "15", "86005000060060", "15", "87008000330064", "5DD4",
                "87008000340065", "5DD4", "86001000040066", "1", "86001000060066", "15", "86006000020067", "15",
                "86001000060067", "8CA3", "86001000040068", "15", "86001000040057", "1", "87008000100069", "5DD4",
                "86007000460071", "15", "86014000210072", "15", "86007000460073", "15", "86005000060085", "CB23",
                "86001000060086", "8CA3", "86006000860088", "15", "86001003450089", "15", "86001000041", "1",
                "860010000415", "15", "8700800005S003", "5DD4", "8700800006S004", "5DD4", "8700800009S007", "5DD4",
                "8700800010S008", "5DD4", "8700800022S011", "5DD4", "8700802110S012", "5DD4");
        Object cardType = cardTypeMap.get(key);
        return cardType;
    }

    public static String changeCityCode(Map inMap) {
        Map cityCodeMap = MapUtils.asMap("10101", "0471", "10102", "0472", "10103", "0474", "10104", "0477", "10105",
                "0478", "10106", "0473", "10107", "0476", "10108", "0470", "10109", "0475", "10111", "0479", "10112",
                "9112", "10113", "0482", "10114", "0483", "10115", "9115", "11110", "0010", "13130", "0022", "17150",
                "0533", "17151", "0543", "17152", "0631", "17153", "0539", "17154", "0633", "17155", "0536", "17156",
                "0546", "17157", "0632", "17158", "0537", "17159", "0530", "17160", "0634", "17161", "0535", "17166",
                "0532", "17170", "0531", "17172", "0538", "17173", "0534", "17174", "0635", "18180", "0317", "18181",
                "0315", "18182", "0335", "18183", "0316", "18184", "0313", "18185", "0319", "18186", "0310", "18187",
                "0312", "18188", "0311", "18189", "0314", "18720", "0318", "19190", "0351", "19191", "0354", "19192",
                "0353", "19193", "0352", "19194", "0356", "19195", "0355", "19196", "0359", "19197", "0357", "19198",
                "0350", "19199", "0349", "19200", "0358", "30300", "0555", "30301", "0552", "30302", "0556", "30303",
                "0553", "30304", "0564", "30305", "0551", "30306", "0558", "30307", "0554", "30308", "0562", "30309",
                "0565", "30311", "0563", "30312", "0550", "30313", "0557", "30314", "0561", "30316", "0559", "30317",
                "0566", "30318", "9318", "31310", "0021", "34330", "0510", "34340", "0025", "34343", "0511", "34346",
                "0518", "34348", "0515", "34349", "0527", "34350", "0516", "34354", "0517", "34358", "0513", "34430",
                "0514", "34440", "0519", "34445", "0523", "34450", "0512", "36360", "0571", "36362", "0572", "36363",
                "0573", "36364", "0580", "36365", "0575", "36367", "0579", "36370", "0574", "36468", "0570", "36469",
                "0578", "36470", "0577", "36476", "0576", "38380", "0591", "38384", "0597", "38385", "0594", "38386",
                "0593", "38387", "0599", "38389", "0598", "38390", "0592", "38395", "0596", "38480", "0595", "50501",
                "0898", "50502", "0898", "50503", "0898", "51510", "0020", "51520", "0759", "51525", "0660", "51526",
                "0663", "51528", "0753", "51530", "0757", "51531", "0768", "51533", "9533", "51535", "0763", "51536",
                "0758", "51538", "0766", "51540", "0755", "51550", "0750", "51556", "0760", "51558", "0751", "51560",
                "0754", "51565", "0662", "51568", "0668", "51570", "0752", "51580", "0769", "51620", "0756", "51670",
                "0762", "51678", "9678", "59588", "0588", "59589", "0589", "59590", "0770", "59591", "0771", "59592",
                "0773", "59593", "0772", "59594", "0774", "59595", "0775", "59596", "0776", "59597", "0777", "59598",
                "0778", "59599", "0779", "59600", "9600", "59601", "9601", "70700", "0971", "70701", "0972", "70702",
                "0979", "70703", "9703", "70704", "0977", "70705", "0974", "70706", "0970", "70707", "0973", "70708",
                "0975", "70709", "0976", "71710", "0027", "71711", "0717", "71712", "0716", "71713", "0728", "71714",
                "0713", "71715", "0714", "71716", "0710", "71717", "0712", "71718", "0711", "71719", "0715", "71721",
                "0719", "71723", "0722", "71724", "0724", "71725", "0728", "71726", "0728", "71727", "0718", "74741",
                "0731", "74742", "0733", "74743", "0732", "74744", "0734", "74745", "0730", "74746", "9746", "74747",
                "0737", "74748", "0735", "74749", "0736", "74791", "0738", "74792", "0739", "74793", "0743", "74794",
                "0744", "74795", "0745", "74796", "0746", "75740", "0798", "75750", "0791", "75751", "0796", "75752",
                "0797", "75753", "0790", "75754", "0701", "75755", "0792", "75756", "0795", "75757", "0793", "75758",
                "0799", "75759", "0794", "76760", "0371", "76761", "0379", "76762", "0378", "76763", "0391", "76764",
                "0373", "76765", "0374", "76766", "0395", "76767", "0372", "76768", "0370", "76769", "0375", "76770",
                "0394", "76771", "0396", "76772", "0398", "76773", "0393", "76774", "0392", "76775", "0399", "76776",
                "0376", "76777", "0377", "79790", "0891", "79797", "0892", "79798", "0893", "79799", "0894", "79800",
                "0895", "79801", "0896", "79802", "0897", "81810", "0028", "81811", "0835", "81812", "0834", "81813",
                "0812", "81814", "0833", "81815", "0830", "81816", "0832", "81817", "0831", "81818", "0813", "81819",
                "0425", "81820", "0818", "81821", "0825", "81822", "0817", "81823", "0826", "81824", "0816", "81825",
                "0838", "81826", "0839", "81827", "0827", "81828", "0836", "81829", "0837", "81830", "9830", "83830",
                "0023", "83831", "0023", "84840", "0917", "84841", "0029", "84842", "0911", "84843", "0913", "84844",
                "0910", "84845", "0912", "84846", "0919", "84847", "0914", "84848", "0915", "84849", "0916", "85785",
                "0856", "85786", "0855", "85787", "0852", "85788", "0854", "85789", "0853", "85850", "0851", "85851",
                "0857", "85852", "0859", "85853", "0858", "86730", "0692", "86731", "0875", "86732", "0876", "86733",
                "0883", "86734", "0886", "86735", "0887", "86736", "0691", "86860", "0871", "86861", "0873", "86862",
                "0872", "86863", "0888", "86864", "0878", "86865", "0877", "86866", "0874", "86867", "0870", "86868",
                "9868", "86869", "0879", "87870", "0931", "87871", "0932", "87872", "0933", "87873", "0934", "87874",
                "0935", "87875", "0936", "87876", "0937", "87877", "0938", "87878", "0930", "87879", "0943", "87930",
                "9930", "87931", "9931", "87960", "0939", "87961", "0941", "88880", "0951", "88883", "0953", "88884",
                "0952", "88885", "0954", "88886", "0955", "89890", "0991", "89891", "0994", "89892", "0992", "89893",
                "0993", "89894", "0995", "89895", "0996", "89896", "0997", "89897", "0998", "89898", "0999", "89899",
                "0990", "89900", "0902", "89951", "0909", "89952", "0901", "89953", "0906", "89954", "0908", "89955",
                "0903", "90901", "0431", "90902", "0432", "90903", "0434", "90904", "0438", "90905", "0435", "90906",
                "0437", "90907", "0436", "90908", "0439", "90909", "0433", "91910", "0024", "91911", "0410", "91912",
                "0412", "91913", "0413", "91914", "0414", "91915", "0415", "91916", "0416", "91917", "0417", "91918",
                "0418", "91919", "0419", "91920", "0421", "91921", "0427", "91922", "0429", "91940", "0411", "97971",
                "0451", "97973", "0452", "97976", "0454", "97981", "0459", "97988", "0453", "97989", "0455", "97990",
                "0456", "97991", "0467", "97992", "0464", "97993", "0468", "97994", "0469", "97995", "0457", "97996",
                "0458");
        Object cityCode = cityCodeMap.get(inMap.get("province").toString() + inMap.get("city"));
        return null == cityCode ? inMap.get("city").toString() : cityCode.toString();
    }

    /**
     * AOP对CBSS终端提供方式转换
     * 不传或传错不下发给CB
     * 
     * @param key
     * @return
     */
    public static Object changeMachineProvideToCB(Object key) {
        Map speedMap = MapUtils.asMap("1", "8", "2", "0", "3", "2", "4", "A", "5", "9", "6", "4", "7", "7", "8", "3",
                "9", "6", "10", "5", "11", "1", "12", "F", "13", "H", "14", "I", "15", "J", "16", "K", "17", "L", "18",
                "M", "19", "N", "20", "O", "21", "W", "22", "X", "23", "Y");
        Object CBProvide = speedMap.get(key);
        return null == CBProvide ? null : CBProvide;
    }

    public static void main(String[] args) {
        String str = "{'city':'810','contactPerson':'孙远飞','markingTag':'1','channelType':'1010200','channelId':'81a0345','custId':'8117121823055626','authAcctId':'02802145961','orderNo':'81018051074611081254','userName':'02802145961','district':'810001','serialNumber':'02802145961','opeSysType':'2','custType':'1','operatorId':'CDJF0010','newUserInfo':{'productInfo':[{'productId':'90217458','productMode':'1','packageElement':[{'optType':'1','elementId':'4000001','serviceAttr':[{'value':'沃家云盘5元（赠送）','code':'4000001'}],'packageId':'51316896','elementType':'D'}]}],'installAddress':'四川省成都锦江区大观里路10号大观里3栋1单元4层02','addressCode':'25844851','speedLevel':'22','pointExchId':'1606312','certAddress':'四川省广安市广安区虎城乡新胜村３组４０号附１号','serviceArea':'810001','certName':'孙远飞','certExpireDate':'20230313','certNum':'511602198803148096','addressName':'四川省成都锦江区大观里路10号大观里3栋1单元4层02','exchCode':'1606312','certType':'02','areaExchId':'810001','accessMode':'B61','pickupArea':'101','constructionTime':'0','debutySerialNumber':'18581843185','boradDiscntInfo':[{'boradDiscntId':'8197804'}],'createOrExtendsAcct':'1'},'completionDic':{'numberDic':{'key':'宽带编码','value':'02802145961'},'accessTypeDic':{'key':'接入方式','value':'FTTH'},'productDic':{'key':'项目','value':' 四川省交通运输厅公路运输管理局（省分）'},'dadanquDic':{'key':'打单区','value':'青羊东打单区'}},'shareFalg':'0','contactPhone':'123456','province':'81','bindInfo':[{'bindSrc':'0','bindSeriaNumber':'18581843185','binduserid':'8115012329785868','bindType':'H006'}],'machineInfo':[{'machineProvide':'2','machineType':'1'}]}, bizkey=TS-KD-001}";
        @SuppressWarnings("rawtypes")
        Map msg = JSONObject.fromObject(str);
        Exchange exchange = new DefaultExchange();
        Message message = new DefaultMessage();
        message.setBody(msg);
        exchange.setIn(message);
        exchange.setAppkey("scpre.sub");
        exchange.setBizkey("TS-KD-001");
        exchange.setMethod("ecaop.trades.sell.brd.sinp.open.app");
        exchange.setTimestamp(new Date());
        Map body = (Map) exchange.getIn().getBody();
        System.out.println(body.get("city"));

    }
}
